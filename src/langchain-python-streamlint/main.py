import os 
from langchain_core.tools import Tool
from langchain_experimental.utilities import PythonREPL
import dotenv
from azure.identity import DefaultAzureCredential
from langchain import agents, hub
from langchain_azure_dynamic_sessions import SessionsPythonREPLTool
from langchain_openai import AzureChatOpenAI
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler

import streamlit as st

dotenv.load_dotenv()
st.image("goku.png", width=500)
st.title('üî¢Welcome to Microsoft Community Days 2025 DEMO!')

st.sidebar.title("üìñExampleGPT!üåê")

st.sidebar.info("""
Note: Be aware that the content provided by this application is generated by AI. While we strive to provide accurate and up-to-date information, there may be instances where the AI-generated content might be incorrect, outdated, or incomplete. 
We recommend users to use this information as a guide and to perform personal due diligence to verify the accuracy of the information provided. We are not responsible for any decisions made based on the information provided by this application.
"""
)
credential = DefaultAzureCredential()
pool_management_endpoint = os.getenv("POOL_MANAGEMENT_ENDPOINT")
openai_api_key = credential.get_token(
        "https://cognitiveservices.azure.com/.default"
    ).token
llm = AzureChatOpenAI(
    api_key=openai_api_key,
    azure_deployment="gpt-4o",
    openai_api_version="2024-07-01-preview",
    openai_api_type="azure_ad",
    temperature=0,
)

repl = SessionsPythonREPLTool(pool_management_endpoint=pool_management_endpoint)
prompt = hub.pull("vale/pythonrepl_optimizer")
tools = [repl]

agent = agents.create_tool_calling_agent(llm, tools, prompt)

agent_executor = agents.AgentExecutor(
    agent=agent, tools=tools, verbose=True, handle_parsing_errors=True
)

if prompt := st.chat_input():
    st.chat_message("user").write(prompt)
    with st.chat_message("assistant"):
        st_callback = StreamlitCallbackHandler(st.container())
        response = agent_executor.invoke({"input": prompt}, {"callbacks": [st_callback] })
        st.write(response)